diff -Naupr ipt-ratelimit-0.2/README ipt-ratelimit/README
--- ipt-ratelimit-0.2/README	2015-11-13 18:37:51.000000000 +0600
+++ ipt-ratelimit/README	2017-03-05 16:42:15.713738853 +0700
@@ -68,9 +68,9 @@ ipt-ratelimit linux kernel module by <ab
   Both options are mandatory. Every set should be first created with iptables
   before it will have configuration file /proc/net/ipt_ratelimit/<name>
 
-  * To create set named "name0":
+  * To create set named "name0", for example:
 
-    # iptables --ratelimit-set name0 --ratelimit-mode src -j DROP
+    # iptables -A FORWARD -m ratelimit --ratelimit-set name0 --ratelimit-mode src -j DROP
 
   This command will work like this:
    - match src (source) IP address of every packet in the set name0,
@@ -123,24 +123,6 @@ ipt-ratelimit linux kernel module by <ab
     * To flush (clean) set named "name0" (i.e. delete all rules):
 
       # echo / > /proc/net/ipt_ratelimit/name0
-      or
-      # echo :flush > /proc/net/ipt_ratelimit/name0
-
-    * Change what to do with packets whose IP do not exist in the set
-
-      # echo :hotdrop > /proc/net/ipt_ratelimit/name0
-
-      Use iptables hotdrop to forcefully drop packets directly from
-      te match rule, no matter what is in the -j target.
-
-      # echo :match > /proc/net/ipt_ratelimit/name0
-
-      'Match' these packets (same as if they are exceeding rate limits),
-      thus, -j target will be triggered, which is usually should be DROP.
-
-      # echo :nomatch > /proc/net/ipt_ratelimit/name0
-
-      Disable aforementioned :match or :hotdrop behavior, returning to default.
 
     * To view statistics:
 
@@ -148,7 +130,7 @@ ipt-ratelimit linux kernel module by <ab
 
     * Stat output example and format:
 
-    10.0.1.5 cir 1000000 cbs 187500 ebs 375000; tc 0 te 0 last never; conf 0/0 0 bps, rej 0/0 0 bps
+    10.0.1.5 cir 1000000 cbs 187500 ebs 375000; tc 0 te 0 last never; conf 0/0 0 bps, rej 0/0
 
       10.0.1.5     IP to match,
       cir 1000000  allowed rate   (cir is committed information rate) in bits,
@@ -159,9 +141,9 @@ ipt-ratelimit linux kernel module by <ab
       last never   how much seconds ago last packet is seen,
       conf 0/0 0 bps
                    conforming traffic counters (pkts/bytes bitrate),
-		   Note, that bitrate here is calculated from the first seen to
-		   the last seen packet, not to the 'now'.
-      rej 0/0 0 bps
+		   Note, that bps here is average bit rate estimation calculated
+		   for last several seconds.
+      rej 0/0
                    rejected (or matched) traffic counters.
 
 
diff -Naupr ipt-ratelimit-0.2/xt_ratelimit.c ipt-ratelimit/xt_ratelimit.c
--- ipt-ratelimit-0.2/xt_ratelimit.c	2015-11-13 18:37:51.000000000 +0600
+++ ipt-ratelimit/xt_ratelimit.c	2017-03-05 16:42:15.717072202 +0700
@@ -56,6 +56,8 @@ MODULE_LICENSE("GPL");
 MODULE_VERSION(XT_RATELIMIT_VERSION);
 MODULE_ALIAS("ipt_ratelimit");
 
+#define RATE_ESTIMATOR			/* average rate estimator */
+
 static unsigned int hashsize __read_mostly = 10000;
 module_param(hashsize, uint, 0400);
 MODULE_PARM_DESC(hashsize, "default size of hash table used to look up IPs");
@@ -83,15 +85,22 @@ struct ratelimit_car {
 
 	u32 cbs;			/* committed burst size (bytes) */
 	u32 ebs;			/* extended burst size (bytes) */
-	u32 cir;			/* committed information rate (bits/s) */
+	u32 cir;			/* committed information rate (bits/s) / (HZ * 8) */
 };
 
 struct ratelimit_stat {
-	u64 green_bytes;
-	u64 red_bytes;
-	u32 green_pkt;
-	u32 red_pkt;
-	unsigned long first;		/* first time seen */
+	atomic64_t green_bytes;
+	atomic64_t red_bytes;
+	atomic_t green_pkt;
+	atomic_t red_pkt;
+
+#ifdef RATE_ESTIMATOR
+#define RATEST_SECONDS 4		/* length of rate estimator time slot */
+#define RATEST_JIFFIES (HZ * RATEST_SECONDS)
+	u64 cur_s_bytes;		/* accumulator at current time slot */
+	u64 prev_s_bytes;		/* accumulator at previous slot */
+	unsigned int est_slot;		/* current time slot */
+#endif
 };
 
 /* hash bucket entity */
@@ -138,6 +147,35 @@ static inline struct ratelimit_net *rate
         return net_generic(net, ratelimit_net_id);
 }
 
+#ifdef RATE_ESTIMATOR
+unsigned long calc_rate_est(const struct ratelimit_stat *stat)
+{
+	const unsigned long now = jiffies;
+	const unsigned int est_slot = now / RATEST_JIFFIES;
+	unsigned long bps;
+	unsigned long cur_bytes = 0;
+
+	/* init 'bps' to previous slot bytes size */
+	if (est_slot == stat->est_slot) {
+		bps = stat->prev_s_bytes;
+		cur_bytes = stat->cur_s_bytes;
+	} else if ((est_slot - 1) == stat->est_slot)
+		bps = stat->cur_s_bytes;
+	else
+		return 0;
+
+	{
+		const unsigned int slot_delta_rtime = RATEST_JIFFIES - (now % RATEST_JIFFIES);
+#define SMOOTH_VAUE 10 /* smoothen integer arithmetics */
+		const unsigned int prev_ratio = (slot_delta_rtime)?
+			RATEST_JIFFIES * SMOOTH_VAUE / slot_delta_rtime : SMOOTH_VAUE;
+
+		bps = bps * SMOOTH_VAUE / prev_ratio;
+		bps += cur_bytes;
+		return bps * BITS_PER_BYTE / RATEST_SECONDS;
+	}
+}
+#endif
 #define SAFEDIV(x,y) ((y)? ({ u64 __tmp = x; do_div(__tmp, y); (unsigned int)__tmp; }) : 0)
 
 static int ratelimit_seq_ent_show(struct ratelimit_match *mt,
@@ -159,7 +197,7 @@ static int ratelimit_seq_ent_show(struct
 		    &ent->matches[i].addr);
 	}
 	seq_printf(s, " cir %u cbs %u ebs %u;",
-	    ent->car.cir, ent->car.cbs, ent->car.ebs);
+	    ent->car.cir * (HZ * BITS_PER_BYTE), ent->car.cbs, ent->car.ebs);
 
 	seq_printf(s, " tc %u te %u last", ent->car.tc, ent->car.te);
 	if (ent->car.last)
@@ -167,13 +205,17 @@ static int ratelimit_seq_ent_show(struct
 	else
 		seq_printf(s, " never;");
 
-	seq_printf(s, " conf %u/%llu %u bps, rej %u/%llu %u bps",
-	    ent->stat.green_pkt, ent->stat.green_bytes,
-	    SAFEDIV(ent->stat.green_bytes * 8,
-		    (ent->car.last - ent->stat.first) / HZ),
-	    ent->stat.red_pkt, ent->stat.red_bytes,
-	    SAFEDIV(ent->stat.red_bytes * 8,
-		    (ent->car.last - ent->stat.first) / HZ));
+	seq_printf(s, " conf %u/%llu",
+	    (u32)atomic_read(&ent->stat.green_pkt),
+		 (u64)atomic64_read(&ent->stat.green_bytes));
+
+#ifdef RATE_ESTIMATOR
+	seq_printf(s, " %lu bps", calc_rate_est(&ent->stat));
+#endif
+
+	seq_printf(s, ", rej %u/%llu",
+	    (u32)atomic_read(&ent->stat.red_pkt),
+		 (u64)atomic64_read(&ent->stat.red_bytes));
 
 	seq_printf(s, "\n");
 
@@ -401,7 +443,7 @@ static int parse_rule(struct xt_ratelimi
 		val = simple_strtoul(v, NULL, 10);
 		switch (i) {
 			case 0:
-				ent->car.cir = val;
+				ent->car.cir = val / (HZ * BITS_PER_BYTE);
 				/* autoconfigure optimal parameters */
 				val = val / 8 + (val / 8 / 2);
 				/* FALLTHROUGH */
@@ -762,6 +804,22 @@ static void htable_put(struct xt_ratelim
 	}
 }
 
+#ifdef RATE_ESTIMATOR
+void rate_estimator(struct ratelimit_stat *stat, const unsigned int est_slot, const unsigned int bytes) {
+	if (likely(stat->est_slot == est_slot)) {
+		/* while we are in 'current time slot' increment traffic counter */
+		stat->cur_s_bytes += bytes;
+	} else { /* new time slot */
+		if (stat->est_slot == (est_slot - 1)) /* adjacent slot */
+			stat->prev_s_bytes = stat->cur_s_bytes;
+		else
+			stat->prev_s_bytes = 0;
+		stat->cur_s_bytes = 0;
+		stat->est_slot = est_slot;
+	}
+}
+#endif
+
 /* match the packet */
 static bool
 ratelimit_mt(const struct sk_buff *skb, struct xt_action_param *par)
@@ -784,34 +842,38 @@ ratelimit_mt(const struct sk_buff *skb,
 	if (ent) {
 		struct ratelimit_car *car = &ent->car;
 		const unsigned int len = skb->len; /* L3 */
-		const unsigned long delta_ms = (now - car->last) * (MSEC_PER_SEC / HZ);
+		u32 tok;
 
 		spin_lock(&ent->lock_bh);
+		tok = (now - car->last) * car->cir;
 		car->tc += len;
-		if (delta_ms) {
-			const u32 tok = delta_ms * (car->cir / (BITS_PER_BYTE * MSEC_PER_SEC));
-
+		if (tok) {
 			car->tc -= min(tok, car->tc);
-			if (!ent->stat.first)
-				ent->stat.first = now;
 			car->last = now;
 		}
 		if (car->tc > car->cbs) { /* extended burst */
 			car->te += car->tc - car->cbs;
 			if (car->te > car->ebs) {
 				car->te = 0;
+				car->tc -= len;
 				match = true; /* match is drop */
 			}
 		}
+
+#ifdef RATE_ESTIMATOR
+		if (!match) {
+			rate_estimator(&ent->stat, now / RATEST_JIFFIES, len);
+		}
+#endif
+		spin_unlock(&ent->lock_bh);
+
 		if (match) {
-			ent->stat.red_bytes += len;
-			ent->stat.red_pkt++;
-			car->tc -= len;
+			atomic64_add(len, &ent->stat.red_bytes);
+			atomic_inc(&ent->stat.red_pkt);
 		} else {
-			ent->stat.green_bytes += len;
-			ent->stat.green_pkt++;
+			atomic64_add(len, &ent->stat.green_bytes);
+			atomic_inc(&ent->stat.green_pkt);
 		}
-		spin_unlock(&ent->lock_bh);
 	} else {
 		if (ht->other == OT_MATCH)
 			match = true; /* match is drop */
