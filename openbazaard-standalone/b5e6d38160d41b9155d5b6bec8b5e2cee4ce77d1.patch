diff --git a/LICENSE b/LICENSE
index fb8bc95..ae38be8 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,6 +1,6 @@
 The MIT License (MIT)
 
-Copyright (c) 2015-2016 OpenBazaar Developers
+Copyright (c) 2015-2017 OpenBazaar Developers
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/api/restapi.py b/api/restapi.py
index b585984..2b01b99 100644
--- a/api/restapi.py
+++ b/api/restapi.py
@@ -29,6 +29,8 @@ from market.contracts import Contract, check_order_for_payment
 from market.btcprice import BtcPrice
 from net.upnp import PortMapper
 from api.utils import sanitize_html
+from market.migration import migratev2
+from twisted.web import static
 
 DEFAULT_RECORDS_COUNT = 20
 DEFAULT_RECORDS_OFFSET = 0
@@ -1467,6 +1469,26 @@ class OpenBazaarAPI(APIResource):
             request.finish()
             return server.NOT_DONE_YET
 
+    @GET('^/api/v1/export')
+    def migrate(self, request):
+        try:
+            path = migratev2(self.db)
+            request.setHeader('content-disposition', 'filename="listings.csv"')
+            request.setHeader('content-type', "text/csv")
+            f = open(path)
+            while 1:
+                d = f.read(2048)
+                if not d:
+                    break
+                request.write(d)
+            f.close()
+            request.finish()
+            return server.NOT_DONE_YET
+        except Exception, e:
+            request.write(json.dumps({"success": False, "reason": e.message}))
+            request.finish()
+            return server.NOT_DONE_YET
+
 
 class RestAPI(Site):
 
diff --git a/market/btcprice.py b/market/btcprice.py
index f458656..01a66a2 100644
--- a/market/btcprice.py
+++ b/market/btcprice.py
@@ -22,7 +22,7 @@ class BtcPrice(Thread):
         self.prices = {}
         self.condition = Condition()
         self.keepRunning = True
-        self.loadPriorities = ["loadbitcoinaverage", "loadbitpay", "loadblockchain", "loadbitcoincharts"]
+        self.loadPriorities = ["loadbitpay", "loadblockchain", "loadbitcoincharts"]
         BtcPrice.__instance = self
 
     def closethread(self):
diff --git a/market/migration.py b/market/migration.py
new file mode 100644
index 0000000..7ec05d6
--- /dev/null
+++ b/market/migration.py
@@ -0,0 +1,152 @@
+from protos import objects
+import csv
+import os
+from config import DATA_FOLDER
+from collections import OrderedDict
+import json
+import base64
+import requests
+from protos.countries import CountryCode
+
+
+def migratev2(db):
+    ser = db.listings.get_proto()
+    if ser is not None:
+        path = os.path.join(DATA_FOLDER, "listings.csv")
+        with open(path, 'w') as csvfile:
+            fieldnames = ["contract_type", "pricing_currency", "language", "title", "description", "processing_time",
+                          "price", "nsfw", "image_urls", "categories", "condition", "quantity", "sku_number",
+                          "shipping_option1_name", "shipping_option1_countries", "shipping_option1_service1_name",
+                          "shipping_option1_service1_estimated_delivery", "shipping_option1_service1_estimated_price",
+                          "shipping_option2_name", "shipping_option2_countries", "shipping_option2_service1_name",
+                          "shipping_option2_service1_estimated_delivery", "shipping_option2_service1_estimated_price"]
+            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
+            writer.writeheader()
+            l = objects.Listings()
+            l.ParseFromString(ser)
+            for listing in l.listing:
+                with open(db.filemap.get_file(listing.contract_hash.encode("hex")), "r") as filename:
+                    contract = json.loads(filename.read(), object_pairs_hook=OrderedDict)
+
+                price = ""
+                if listing.currency_code.lower() == "btc":
+                    price = contract["vendor_offer"]["listing"]["item"]["price_per_unit"]["bitcoin"]
+                    price = int(price * 100000000)
+                else:
+                    price = contract["vendor_offer"]["listing"]["item"]["price_per_unit"]["fiat"]["price"]
+
+                sku = ""
+                if "sku" in contract["vendor_offer"]["listing"]["item"]:
+                    sku = contract["vendor_offer"]["listing"]["item"]["sku"]
+
+                condition = ""
+                if "condition" in contract["vendor_offer"]["listing"]["item"]:
+                    condition = contract["vendor_offer"]["listing"]["item"]["condition"]
+
+                category = ""
+                if "category" in contract["vendor_offer"]["listing"]["item"]:
+                    category = contract["vendor_offer"]["listing"]["item"]["category"]
+
+                contract_type = "PHYSICAL_GOOD"
+                if contract["vendor_offer"]["listing"]["metadata"]["category"] == "digital good":
+                    contract_type = "DIGITAL_GOOD"
+
+                row = {
+                    'contract_type': contract_type,
+                    'pricing_currency': listing.currency_code,
+                    'language': 'english',
+                    'title': listing.title,
+                    'description': contract["vendor_offer"]["listing"]["item"]["description"],
+                    'processing_time': contract["vendor_offer"]["listing"]["item"]["process_time"],
+                    'price': price,
+                    'nsfw': str(listing.nsfw),
+                    'image_urls': '',
+                    'categories': category,
+                    'condition': condition,
+                    'quantity': '-1',
+                    'sku_number': sku
+                }
+                img64 = []
+                for img_hash in contract["vendor_offer"]["listing"]["item"]["image_hashes"]:
+                    image_path = db.filemap.get_file(img_hash)
+                    with open(image_path, "rb") as image_file:
+                        encoded_string = base64.b64encode(image_file.read())
+                    img64.append(encoded_string)
+                if len(img64) == 1:
+                    row["image_urls"] = img64[0]
+                else:
+                    img_csv = ''
+                    r = 0
+                    for img in img64:
+                        r += 1
+                        img_csv += img
+                        if r != len(img64):
+                            img_csv += ","
+                    row["image_urls"] = img_csv
+                if contract_type == "PHYSICAL_GOOD":
+                    if "free" in contract["vendor_offer"]["listing"]["shipping"] and contract["vendor_offer"]["listing"]["shipping"] is True:
+                        row["shipping_option1_name"] = "Free Shipping"
+                        countries = []
+                        for country in listing.ships_to:
+                            countries.append(str(CountryCode.Name(country)))
+                        if len(countries) == 1:
+                            row["shipping_option1_countries"] = countries[0]
+                        else:
+                            country_csv = ''
+                            r = 0
+                            for c in countries:
+                                r += 1
+                                country_csv += c
+                                if r != len(countries):
+                                    country_csv += ","
+                            row["shipping_option1_countries"] = country_csv
+                        row["shipping_option1_service1_name"] = "default service"
+                        ed = "standard shipping time"
+                        row["shipping_option1_service1_estimated_delivery"] = ed
+                        row["shipping_option1_service1_estimated_price"] = "0"
+                    elif "flat_fee" in contract["vendor_offer"]["listing"]["shipping"]:
+                        cc = "bitcoin"
+                        if listing.currency_code.lower() != "btc":
+                            cc = "fiat"
+                        if "domestic" in contract["vendor_offer"]["listing"]["shipping"]["flat_fee"][cc]["price"]:
+                            row["shipping_option1_name"] = "Domestic Shipping"
+                            row["shipping_option1_countries"] = contract["vendor_offer"]["listing"]["shipping"][
+                                "shipping_origin"]
+                            row["shipping_option1_service1_name"] = "default service"
+                            ed = contract["vendor_offer"]["listing"]["shipping"]["est_delivery"]["domestic"]
+                            if ed == "":
+                                ed = "standard shipping time"
+                            row["shipping_option1_service1_estimated_delivery"] = ed
+                            ship_price = contract["vendor_offer"]["listing"][
+                                "shipping"]["flat_fee"][cc]["price"]["domestic"]
+                            if cc == "bitcoin":
+                                ship_price = int(ship_price * 100000000)
+                            row["shipping_option1_service1_estimated_price"] = ship_price
+                        if "international" in contract["vendor_offer"]["listing"]["shipping"]["flat_fee"][cc]["price"]:
+                            row["shipping_option2_name"] = "International Shipping"
+                            countries = []
+                            for country in listing.ships_to:
+                                countries.append(str(CountryCode.Name(country)))
+                            if len(countries) == 1:
+                                row["shipping_option2_countries"] = countries[0]
+                            else:
+                                country_csv = ''
+                                r = 0
+                                for c in countries:
+                                    r += 1
+                                    country_csv += c
+                                    if r != len(countries):
+                                        country_csv += ","
+                                row["shipping_option2_countries"] = country_csv
+                            row["shipping_option2_service1_name"] = "default service"
+                            ed = contract["vendor_offer"]["listing"]["shipping"]["est_delivery"]["international"]
+                            if ed == "":
+                                ed = "standard shipping time"
+                            row["shipping_option2_service1_estimated_delivery"] = ed
+                            row["shipping_option2_service1_estimated_price"] = contract["vendor_offer"]["listing"][
+                                "shipping"]["flat_fee"][cc]["price"]["international"]
+
+                writer.writerow(row)
+        return path
+    else:
+        raise Exception("failed to deserialize listings")
diff --git a/net/rpcudp.py b/net/rpcudp.py
index f36c183..a39b59d 100644
--- a/net/rpcudp.py
+++ b/net/rpcudp.py
@@ -11,7 +11,7 @@ from dht.node import Node
 from dht.utils import digest
 from hashlib import sha1
 from log import Logger
-from protos.message import Message, Command, NOT_FOUND, HOLE_PUNCH
+from protos.message import Message, Command, NOT_FOUND, HOLE_PUNCH, ORDER
 from protos.objects import FULL_CONE, RESTRICTED, SYMMETRIC
 from twisted.internet import defer, reactor
 from txrudp.connection import State
@@ -25,7 +25,7 @@ class RPCProtocol:
     """
     __metaclass__ = abc.ABCMeta
 
-    def __init__(self, sourceNode, router, waitTimeout=30):
+    def __init__(self, sourceNode, router, waitTimeout=60):
         """
         Args:
             sourceNode: A protobuf `Node` object containing info about this node.
@@ -64,7 +64,6 @@ class RPCProtocol:
             ban_score.process_message(connection.dest_addr, message)
             self._acceptRequest(msgID, str(Command.Name(message.command)).lower(), data, sender, connection)
 
-
     def _acceptResponse(self, msgID, data, sender):
         if data is not None:
             msgargs = (b64encode(msgID), sender)
diff --git a/ob.cfg b/ob.cfg
index 5947c77..331395a 100644
--- a/ob.cfg
+++ b/ob.cfg
@@ -11,7 +11,7 @@
 KSIZE = 20
 ALPHA = 3
 
-TRANSACTION_FEE = 30000
+TRANSACTION_FEE = 75000
 
 RESOLVER = https://resolver.onename.com/
 
diff --git a/requirements.txt b/requirements.txt
index a0e2a5a..6a767ee 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,6 +1,6 @@
-protobuf==3.0.0
+protobuf==3.0.0b2
 Twisted==16.3.0
-txrudp==0.5.1
+txrudp==0.5.2
 pystun==0.1.0
 bitcointools==1.1.44
 gnupg==2.0.2
