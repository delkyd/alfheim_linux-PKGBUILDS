#!/bin/bash

# List all configured games.
function list {
  ls /usr/share/dom4/config | cut -d "." -f 1
}

# Install Dominions 4 via SteamCMD.
function install {
  if [ ! $(find /opt/dom4 -maxdepth 0 -type d -empty 2>/dev/null) ];then
    echo "/opt/dom4 is not empty. Is Dominions 4 already installed?"
    exit 0
  fi

  read -r -p "Steam username: " user
  read -r -s -p "Steam password: " pass

  echo
  echo "Installing Dominions 4 to /opt/dom4..."

  sudo -u dom4 steamcmd +login $user $pass +force_install_dir /opt/dom4 +app_update 259060 validate +quit

  read -r -p "Enter your Dominions 4 license key: " key
  echo $key | sudo -u dom4 tee /opt/dom4/dom4key > /dev/null

  echo "Copied license information to Dominions 4 install directory."
  echo "Installation complete. Use 'dom4 config' to set up a game."
}

# Change the current hosted game by editing /usr/share/dom4/current.
# Params:
#   $1  game name
function change {
  if [[ -s /usr/share/dom4/current ]]; then
    game=$(</usr/share/dom4/current)

    if [[ $1 != $game ]]; then
      read -r -n 2 -p "Currently hosting $game. Set up to host $1 instead? [Y/n] " ovr
      if [[ $ovr != Y ]]; then
        exit 0
      fi
      echo
    fi
  fi

  echo "Setting $1 up for hosting."
  echo
  echo "$1" | sudo -u dom4 tee /usr/share/dom4/current > /dev/null
}

# Load a properties file.
# Params:
#   $1  path to properties file
function config {
  if [[ -z $1 ]]; then
    cat <<EOF
Usage:

  dom4 config mygame
EOF
    exit 1
  fi

  if [[ -s "/usr/share/dom4/config/$1.properties" ]]; then
    read -r -n 2 -p "$1 is already configured. Edit this game? [Y/n] " ovr
    if [[ $ovr != Y ]]; then
      exit 0
    fi

    echo
  else
    newgame=true
    cat << EOF | sudo -u dom4 tee /usr/share/dom4/config/$1.properties > /dev/null
# See http://www.illwinter.com/dom4/startoptions.pdf for a full reference.
# Sections 3-5, 3-6, and 3-7 are especially relevant. Switches should be
# reproduced as given in the documentation, without any leading dashes (so to
# pass the '--era 1' setting to the server, include the line 'era 1' in this
# file).

# SERVER INFO

# Port number must be between 1024 and 65535, and forwarded in your router
# config. Master password is not required but useful if you want to be able to
# set dropped-out players to computer control.

port 6666
masterpass supersecure

# GAME SETTINGS

# The mapfile is required. Any .rgb or image files must have the same filename
# and differ only in extension since the map data is automatically copied over.

mapfile my_pretty_world.map
hours 26
era 1
renaming
storyevents
hofsize 15
requiredap 13
thrones 2 8 1
EOF
  fi

  sudo -u dom4 ${EDITOR:-nano} /usr/share/dom4/config/$1.properties

  mapfile=$(grep -oP "^mapfile\s+\K.+" /usr/share/dom4/config/$1.properties)
  mapname=$(basename $mapfile .map)

  if [ "$newgame" = true ]; then
    if [[ -s "$mapname.map" ]]; then
      echo "Copying $mapname map files..."

      sudo cp "$mapname".* /usr/share/dom4/maps
    elif [[ -s "$HOME/dominions4/maps/$mapname".map ]]; then
      echo "Copying $mapname map files from $HOME/dominions4/maps..."

      sudo cp "$HOME/dominions4/maps/$mapname".* /usr/share/dom4/maps
    else
      echo "Could not find $mapname.map in $(pwd) or $HOME/dominions4/maps. Please ensure the map file(s) exist in one or the other location and try again."

      exit 1;
    fi

    echo

    change $1

    cat <<EOF
Done. Start the service to let players upload their pretenders.

  sudo systemctl start dom4-server.service

Once all pretenders have been uploaded, stop the service and set the game to ready.

  dom4 ready
EOF
  else
    change $1

    cat <<EOF
Done. Restart the service to load the new configuration:

  sudo systemctl restart dom4-server.service
EOF
  fi
}

# Set game start flag in properties file.
# Params:
#   $1  game name (optional; uses whatever's in current if not supplied)
function ready {
  if [[ ! -z $1 ]]; then
    if [[ ! -s "/usr/share/dom4/config/$1.properties" ]]; then
      echo "No game named '$1' found."

      exit 1
    fi

    change $1
  elif [[ ! -s /usr/share/dom4/current ]]; then
    echo "No game configured. Use 'dom4 config' to set up a game."

    exit 1
  fi

  game=$(</usr/share/dom4/current)

  if [[ ! -d "/usr/share/dom4/savedgames/$game" ]]; then
    echo "No pretenders uploaded for $game. Start the service with systemctl to let players upload."

    exit 1
  fi

  if [[ -s "/usr/share/dom4/savedgames/$game/ftherlnd" ]]; then
    echo "$game has already been started. If the service is not running, start it with systemctl."

    exit 0
  fi

  players=$(ls -1 /usr/share/dom4/savedgames/$game/*.2h | wc -l)

  if grep -qE "uploadtime|uploadmaxp" /usr/share/dom4/config/$game.properties ; then
    echo "Upload flag already set for $game. Start the service with systemctl."

    exit 0
  fi

  echo "Setting start flag for $game ($players players)"

  echo "uploadmaxp $players" | sudo -u dom4 tee -a "/usr/share/dom4/config/$game.properties" > /dev/null

  cat <<EOF

Flag set. Start the dom4-server service to begin the game.

  sudo systemctl start dom4-server.service

You may wish to enable it as well to ensure it restarts on boot.
EOF
}

function delete {
  if [[ -z $1 ]]; then
    echo "Specify a game name to delete."
    exit 0
  fi

  if [[ -s /usr/share/dom4/current ]]; then
    game=$(</usr/share/dom4/current)

    if [[ $game = $1 ]]; then
      read -r -n 2 -p "$game is currently being hosted. Really delete? [Y/n] " ovr
      if [[ $ovr != Y ]]; then
        exit 0
      fi

      sudo -u dom4 rm /usr/share/dom4/current
    fi
  fi

  # leave the mapfile in case something else is using it
  sudo -u dom4 rm /usr/share/dom4/config/$1.properties
  sudo -u dom4 rm -rf /usr/share/dom4/savedgames/$1

  echo "Deleted $1."
}

case $1 in
  "list")
    list
    ;;

  "install")
    install
    ;;

  "config" | "configure")
    config "${@:2}"
    ;;

  "ready")
    ready "${@:2}"
    ;;

  "delete")
    delete "${@:2}"
    ;;

  *)
    cat <<EOF
Dominions 4 Headless Server Interface

This program manages Dominions 4 installation and configuration for the headless server. Multiple games may be configured, but only one game can be actively hosted at once -- this is a true multiplayer server rather than a PBEM setup.

The headless server itself is a systemd service and can be managed via systemctl.

Usage:
  dom4 install        Install Dominions 4 through SteamCMD
  dom4 list           List configured games
  dom4 config mygame  Configure a new game, or edit an existing one
  dom4 ready mygame   Sets the start flag for mygame after all pretenders have been uploaded
  dom4 delete mygame  Deletes mygame (this operation is irreversible!)

Service commands:
  sudo systemctl start dom4-server.service
  sudo systemctl stop dom4-server.service
  sudo systemctl restart dom4-server.service
  systemctl status dom4-server.service
EOF
    ;;
esac
