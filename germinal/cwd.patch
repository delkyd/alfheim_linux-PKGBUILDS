diff --git a/TODO b/TODO
index e2a09be..4e4a682 100644
--- a/TODO
+++ b/TODO
@@ -1 +1,2 @@
-share some stuff (settings) between all windows
+GerminalWindow
+GerminalApplication
diff --git a/src/germinal/germinal-util.h b/src/germinal/germinal-util.h
index 535761c..b99a084 100644
--- a/src/germinal/germinal-util.h
+++ b/src/germinal/germinal-util.h
@@ -39,15 +39,27 @@
 #define WORD_CHAR_EXCEPTIONS_KEY "word-char-exceptions"
 
 /* Watch a setting's changes */
-#define SETTING_SIGNAL(key, fn)                 \
-    g_signal_connect (G_OBJECT (settings),      \
-                      "changed::" key##_KEY,    \
-                      G_CALLBACK (update_##fn), \
-                      terminal)
-/* Watch a setting's changes and initialize with current value */
-#define SETTING(key, fn)     \
-    SETTING_SIGNAL (key, fn); \
-    update_##fn (settings, key##_KEY, terminal)
+#define SETTING_SIGNAL(key, fn)                                        \
+    gulong key##_sig = g_signal_connect (G_OBJECT (settings),          \
+                                         "changed::" key##_KEY,        \
+                                         G_CALLBACK (update_all_##fn), \
+                                         app)
+#define SETTING_SIGNAL_CLEANUP(key) \
+    g_signal_handler_disconnect (settings, key##_sig)
+
+/* Loop over all windows to apply a settings change */
+#define SETTING_UPDATE_FUNC(fn)                                       \
+    static void                                                       \
+    update_all_##fn (GSettings   *settings,                           \
+                     const gchar *key,                                \
+                     gpointer     user_data)                          \
+    {                                                                 \
+        germinal_windows_foreach (GTK_APPLICATION (user_data),        \
+                                  (GerminalSettingsFunc) update_##fn, \
+                                  settings,                           \
+                                  key);                               \
+    }
+
 
 /* Create a menu item, add it to the menu and bind its action */
 #define MENU_ACTION(name, label)                                        \
diff --git a/src/germinal/germinal.c b/src/germinal/germinal.c
index 3ff8cd6..e5ab48f 100644
--- a/src/germinal/germinal.c
+++ b/src/germinal/germinal.c
@@ -23,6 +23,10 @@
 
 #include <stdlib.h>
 
+typedef void (*GerminalSettingsFunc) (GSettings   *settings,
+                                      const gchar *key,
+                                      gpointer     user_data);
+
 static void
 on_child_exited (VteTerminal *vteterminal,
                  gint         status,
@@ -69,6 +73,22 @@ get_url (VteTerminal    *terminal,
 }
 
 static gboolean
+germinal_spawn (gchar  **cmd,
+                GError **error)
+{
+    g_auto (GStrv) env = g_get_environ ();
+
+    return g_spawn_async (g_get_home_dir (),
+                          cmd,
+                          env,
+                          G_SPAWN_SEARCH_PATH,
+                          NULL, /* child setup */
+                          NULL, /* child setup data */
+                          NULL, /* child pid */
+                          error);
+}
+
+static gboolean
 open_url (gchar *url)
 {
     if (!url)
@@ -86,14 +106,7 @@ open_url (gchar *url)
 
     gchar *cmd[] = {browser, url, NULL};
 
-    if (!g_spawn_async (NULL, /* working directory */
-                        cmd,
-                        NULL, /* env */
-                        G_SPAWN_SEARCH_PATH,
-                        NULL, /* child setup */
-                        NULL, /* child setup data */
-                        NULL, /* child pid */
-                        &error))
+    if (!germinal_spawn (cmd, &error))
         g_warning ("%s \"%s %s\": %s", _("Couldn't exec"), browser, url, error->message);
 
     return TRUE;
@@ -200,9 +213,14 @@ do_quit (GtkWidget *widget,
 }
 
 static gboolean
-launch_cmd (const gchar *cmd)
+launch_cmd (const gchar *_cmd)
 {
-    return g_spawn_command_line_async (cmd, NULL);
+    g_auto (GStrv) cmd = NULL;
+
+    if (!g_shell_parse_argv (_cmd, NULL, &cmd, NULL))
+        return FALSE;
+
+    return germinal_spawn (cmd, NULL);
 }
 
 static gboolean
@@ -426,7 +444,6 @@ update_colors (GSettings   *settings,
 
 static int
 germinal_create_window (GApplication *application,
-                        gchar       **env,
                         GStrv         command)
 {
     g_autoptr (GError) error = NULL;
@@ -462,21 +479,15 @@ germinal_create_window (GApplication *application,
 
     vte_terminal_match_add_gregex (term, url_regexp, 0);
 
-    /* Apply and track user settings */
-    g_autoptr (GSettings) settings = g_settings_new ("org.gnome.Germinal");
+    /* Apply user settings */
+    GSettings *settings = g_object_get_data (G_OBJECT (application), "germinal-settings");
 
-    SETTING_SIGNAL (BACKCOLOR, colors);
-    SETTING_SIGNAL (FORECOLOR, colors);
-    SETTING_SIGNAL (PALETTE,   colors);
-    update_colors (settings, NULL, terminal);
-
-    SETTING (FONT,                 font);
-    SETTING (SCROLLBACK,           scrollback);
-    SETTING (WORD_CHAR_EXCEPTIONS, word_char_exceptions);
+    update_colors               (settings, NULL,                     terminal);
+    update_font                 (settings, FONT_KEY,                 terminal);
+    update_scrollback           (settings, SCROLLBACK_KEY,           terminal);
+    update_word_char_exceptions (settings, WORD_CHAR_EXCEPTIONS_KEY, terminal);
 
     /* Launch base command */
-    g_autofree gchar *cwd = g_get_current_dir ();
-
     if (G_LIKELY (!command))
     {
         g_autofree gchar *setting = get_setting (settings, STARTUP_COMMAND_KEY);
@@ -484,10 +495,10 @@ germinal_create_window (GApplication *application,
     }
 
     /* Override TERM */
-    g_auto (GStrv) envp = g_environ_setenv (env, "TERM", get_setting (settings, TERM_KEY), TRUE);
+    g_auto (GStrv) envp = g_environ_setenv (g_get_environ (), "TERM", get_setting (settings, TERM_KEY), TRUE);
 
     /* Spawn our command */
-    if (!vte_terminal_spawn_sync (term, VTE_PTY_DEFAULT, cwd, command, envp, G_SPAWN_SEARCH_PATH,
+    if (!vte_terminal_spawn_sync (term, VTE_PTY_DEFAULT, g_get_home_dir (), command, envp, G_SPAWN_SEARCH_PATH,
                                   NULL, /* child_setup */
                                   NULL, /* child_setup_data */
                                   NULL, /* child_pid */
@@ -536,15 +547,30 @@ germinal_command_line (GApplication            *application,
     g_autoptr (GVariant) v = g_variant_dict_lookup_value (g_application_command_line_get_options_dict (command_line), G_OPTION_REMAINING, NULL);
     GStrv command = (v) ? g_variant_dup_strv (v, NULL) : NULL;
 
-    return germinal_create_window (application, g_strdupv ((gchar **) g_application_command_line_get_environ (command_line)), command);
+    return germinal_create_window (application, command);
 }
 
 static void
 germinal_activate (GApplication *application)
 {
-    germinal_create_window (application, g_get_environ(), NULL);
+    germinal_create_window (application, NULL);
 }
 
+static void
+germinal_windows_foreach (GtkApplication      *application,
+                          GerminalSettingsFunc fn,
+                          GSettings           *settings,
+                          const gchar         *key)
+{
+    for (GList *w = gtk_application_get_windows (application); w; w = w->next)
+        fn (settings, key, gtk_container_get_children (GTK_CONTAINER (w->data))->data);
+}
+
+SETTING_UPDATE_FUNC (colors);
+SETTING_UPDATE_FUNC (font);
+SETTING_UPDATE_FUNC (scrollback);
+SETTING_UPDATE_FUNC (word_char_exceptions);
+
 gint
 main (gint   argc,
       gchar *argv[])
@@ -567,6 +593,18 @@ main (gint   argc,
     klass->command_line = germinal_command_line;
     klass->activate = germinal_activate;
 
+    /* track user settings */
+    g_autoptr (GSettings) settings = g_settings_new ("org.gnome.Germinal");
+
+    SETTING_SIGNAL (BACKCOLOR,            colors);
+    SETTING_SIGNAL (FORECOLOR,            colors);
+    SETTING_SIGNAL (PALETTE,              colors);
+    SETTING_SIGNAL (FONT,                 font);
+    SETTING_SIGNAL (SCROLLBACK,           scrollback);
+    SETTING_SIGNAL (WORD_CHAR_EXCEPTIONS, word_char_exceptions);
+
+    g_object_set_data (G_OBJECT (app), "germinal-settings", settings);
+
     /* Launch program */
     gint ret = g_application_run (gapp, argc, argv);
 
@@ -574,5 +612,12 @@ main (gint   argc,
     g_free (get_url (NULL, NULL));
     g_free (update_colors (NULL, NULL, NULL));
 
+    SETTING_SIGNAL_CLEANUP (BACKCOLOR);
+    SETTING_SIGNAL_CLEANUP (FORECOLOR);
+    SETTING_SIGNAL_CLEANUP (PALETTE);
+    SETTING_SIGNAL_CLEANUP (FONT);
+    SETTING_SIGNAL_CLEANUP (SCROLLBACK);
+    SETTING_SIGNAL_CLEANUP (WORD_CHAR_EXCEPTIONS);
+
     return ret;
 }
