diff -aur calf-0.0.19kx.pristine/src/jack_client.cpp calf-0.0.19kx.new/src/jack_client.cpp
--- calf-0.0.19kx.pristine/src/jack_client.cpp	2014-03-08 21:26:41.000000000 +0000
+++ calf-0.0.19kx.new/src/jack_client.cpp	2017-04-03 07:17:35.538093145 +0000
@@ -163,7 +163,7 @@
                 map<string, int>::const_iterator p = port_to_plugin.find((*k) + cnlen + 1);
                 if (p != port_to_plugin.end())
                 {
-                    run_before.insert(make_pair<int, int>(p->second, i));
+                    run_before.insert(make_pair<int, int>(static_cast<int>(p->second), i));
                 }
             }
             jack_free(conns);
diff -aur calf-0.0.19kx.pristine/src/modules.cpp calf-0.0.19kx.new/src/modules.cpp
--- calf-0.0.19kx.pristine/src/modules.cpp	2014-03-08 21:26:41.000000000 +0000
+++ calf-0.0.19kx.new/src/modules.cpp	2017-04-03 07:39:33.828088388 +0000
@@ -1427,13 +1427,13 @@
                                 //pumping up actual signal an erase surrounding
                                 // sounds
                                 fft_outL[_iter] = 0.25f * std::max(n * 0.6f * \
-                                    fabs(fft_outL[_iter]) - var1L , 1e-20);
-                                if(_param_mode == 3 or _param_mode == 4) {
+									fabs(fft_outL[_iter]) - var1L , 1e-20f);
+								if(_param_mode == 3 or _param_mode == 4) {
                                     // do the same with R channel if needed
                                     lastoutR = fft_outR[_iter];
                                     fft_outR[_iter] = 0.25f * std::max(n * \
-                                        0.6f * fabs(fft_outR[_iter]) - var1R , 1e-20);
-                                }
+										0.6f * fabs(fft_outR[_iter]) - var1R , 1e-20f);
+								}
                                 break;
                         }
                         break;
diff -aur calf-0.0.19kx.pristine/src/modules_limit.cpp calf-0.0.19kx.new/src/modules_limit.cpp
--- calf-0.0.19kx.pristine/src/modules_limit.cpp	2014-03-08 21:26:41.000000000 +0000
+++ calf-0.0.19kx.new/src/modules_limit.cpp	2017-04-03 07:21:13.618092358 +0000
@@ -544,7 +544,7 @@
             } // process single strip with filter
 
             // write multiband coefficient to buffer
-            buffer[pos] = std::min(*params[param_limit] / std::max(fabs(sum_left), fabs(sum_right)), 1.0);
+			buffer[pos] = *params[param_limit] / std::max(fabs(sum_left), fabs(sum_right)) < 1.0 ? *params[param_limit] / std::max(fabs(sum_left), fabs(sum_right)) : 1.0;
 
             for (int i = 0; i < strips; i++) {
                 // process gain reduction
