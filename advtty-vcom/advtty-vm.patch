--- driver/adv_mmap.c.orig	2016-05-31 21:50:00.000000000 -0400
+++ driver/adv_mmap.c	2017-07-06 03:04:26.639226662 -0400
@@ -19,10 +19,11 @@
 #include <linux/module.h>
 
 #include <linux/mm.h>           /* everything */
 #include <linux/errno.h>        /* error codes */
 #include <linux/fs.h>
+#include <linux/version.h>
 #include <asm/pgtable.h>
 #include "advvcom.h"
 
 void adv_vma_open(struct vm_area_struct *vma)
 {
@@ -32,23 +33,33 @@ void adv_vma_open(struct vm_area_struct
 void adv_vma_close(struct vm_area_struct *vma)
 {
 //	printk("%s(%d)\n", __func__, __LINE__);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+int adv_vma_nopage(struct vm_fault *vmf)
+{
+  struct vm_area_struct *vma=vmf->vma;
+#else
 int adv_vma_nopage(struct vm_area_struct *vma, struct vm_fault *vmf)
 {
+#endif
 	unsigned long offset;
 	struct adv_vcom * data;
 	struct page *page = NULL;
 //	void * pageptr = NULL;
 	int ret = 0;
 
 //	printk("%s(%d)\n", __func__, __LINE__);
 	data = vma->vm_private_data;
 
 //	printk("data = %x\n", data);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)
+	offset = (unsigned long)(vmf->address - vma->vm_start) + (vma->vm_pgoff << PAGE_SHIFT);
+#else
 	offset = (unsigned long)(vmf->virtual_address - vma->vm_start) + (vma->vm_pgoff << PAGE_SHIFT);
+#endif
 //	printk("offset = %u \n", offset);
 //	printk("totalsize = %d\n", (data->rx.size + data->tx.size));
 
 
 	if(offset > (data->rx.size + data->tx.size) ){
