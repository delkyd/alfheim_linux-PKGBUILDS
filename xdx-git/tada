#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Feb  1 22:33:17 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn gettextize --force --copy --no-changelog
match_max 100000
expect -exact "Creating build-aux/ subdirectory\r
Copying file ABOUT-NLS\r
Copying file build-aux/config.rpath\r
Not copying intl/ directory.\r
Copying file po/Makefile.in.in\r
Copying file po/Makevars.template\r
Copying file po/Rules-quot\r
Copying file po/boldquot.sed\r
Copying file po/en@boldquot.header\r
Copying file po/en@quot.header\r
Copying file po/insert-header.sin\r
Copying file po/quot.sed\r
Copying file po/remove-potcdate.sin\r
Copying file m4/gettext.m4\r
Copying file m4/iconv.m4\r
Copying file m4/lib-ld.m4\r
Copying file m4/lib-link.m4\r
Copying file m4/lib-prefix.m4\r
Copying file m4/nls.m4\r
Copying file m4/po.m4\r
Copying file m4/progtest.m4\r
Updating EXTRA_DIST in m4/Makefile.am (backup is in m4/Makefile.am~)\r
Updating Makefile.am (backup is in Makefile.am~)\r
Updating configure.ac (backup is in configure.ac~)\r
\r
Please update po/Makevars so that it defines all the variables mentioned\r
in po/Makevars.template.\r
You can then remove po/Makevars.template.\r
\r
Please run 'aclocal -I m4' to regenerate the aclocal.m4 file.\r
You need aclocal from GNU automake 1.9 (or newer) to do this.\r
Then run 'autoconf' to regenerate the configure file.\r
\r
You will also need config.guess and config.sub, which you can get from the CVS\r
of the 'config' project at http://savannah.gnu.org/. The commands to fetch them\r
are\r
\$ wget 'http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.guess'\r
\$ wget 'http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.sub'\r
\r
You might also want to copy the convenience header file gettext.h\r
from the /usr/share/gettext directory into your package.\r
It is a wrapper around <libintl.h> that implements the configure --disable-nls\r
option.\r
\r
Press Return to acknowledge the previous four paragraphs.\r
"
send -- "\r"
expect eof
