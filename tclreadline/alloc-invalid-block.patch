diff -Naur tclreadline-2.1.0.orig/tclreadline.c tclreadline-2.1.0/tclreadline.c
--- tclreadline-2.1.0.orig/tclreadline.c	2016-02-07 21:13:41.655801400 +0100
+++ tclreadline-2.1.0/tclreadline.c	2016-02-07 21:14:27.639137409 +0100
@@ -49,9 +49,6 @@
 static const char* tclrl_version_str = TCLRL_VERSION_STR;
 static const char* tclrl_patchlevel_str = TCLRL_PATCHLEVEL_STR;
 
-#define MALLOC(size) Tcl_Alloc((int) size)
-#define FREE(ptr) if (ptr) { Tcl_Free((char*) ptr); ptr = 0; }
-
 enum {
     _CMD_SET     = (1 << 0),
     _CMD_GET     = (1 << 1)
@@ -343,7 +340,7 @@
 		return TCL_ERROR;
 	    } else if (3 == objc) {
 		if (tclrl_custom_completer)
-		    FREE(tclrl_custom_completer);
+		    free(tclrl_custom_completer);
 		if (!blank_line(Tcl_GetStringFromObj(objv[2], 0)))
 		    tclrl_custom_completer =
 		         stripwhite(strdup(Tcl_GetStringFromObj(objv[2], 0)));
@@ -378,7 +375,7 @@
 		return TCL_ERROR;
 	    } else if (3 == objc) {
 		if (tclrl_eof_string)
-		    FREE(tclrl_eof_string);
+		    free(tclrl_eof_string);
 		if (!blank_line(Tcl_GetStringFromObj(objv[2], 0)))
 		    tclrl_eof_string = 
 		        stripwhite(strdup(Tcl_GetStringFromObj(objv[2], 0)));
@@ -544,8 +541,8 @@
 	 * tell the calling routines to terminate.
 	 */
 	TclReadlineTerminate(LINE_COMPLETE);
-	FREE(ptr);
-	FREE(expansion);
+	free(ptr);
+	free(expansion);
     }
 }
 
@@ -673,7 +670,7 @@
 	    strcpy(rl_line_buffer, expansion);
 	    rl_end = strlen(expansion);
 	    rl_point += strlen(expansion) - oldlen;
-	    FREE(expansion);
+	    free(expansion);
 	    /*
 	     * TODO:
 	     * because we return 0 == matches,
@@ -682,7 +679,7 @@
 	     */
 	    return matches;
 	}
-	FREE(expansion);
+	free(expansion);
     }
 
     if (tclrl_custom_completer) {
@@ -699,8 +696,8 @@
 	state = Tcl_VarEval(tclrl_interp, tclrl_custom_completer,
 	    " \"", quoted_text, "\" ", start_s, " ", end_s,
 	    " \"", quoted_rl_line_buffer, "\"", (char*) NULL);
-	FREE(quoted_text);
-	FREE(quoted_rl_line_buffer);
+	free(quoted_text);
+	free(quoted_rl_line_buffer);
 	if (TCL_OK != state) {
 	    Tcl_AppendResult (tclrl_interp, " `", tclrl_custom_completer,
 		" \"", quoted_text, "\" ", start_s, " ", end_s,
@@ -715,12 +712,12 @@
 
 	if (objc) {
 	    int i, length;
-	    matches = (char**) MALLOC(sizeof(char*) * (objc + 1));
+	    matches = (char**) malloc(sizeof(char*) * (objc + 1));
 	    for (i = 0; i < objc; i++) {
 		matches[i] = strdup(Tcl_GetStringFromObj(objv[i], &length));
 		if (1 == objc && !strlen(matches[i])) {
-		    FREE(matches[i]);
-		    FREE(matches);
+		    free(matches[i]);
+		    free(matches);
 		    Tcl_ResetResult(tclrl_interp); /* clear result space */
 		    return (char**) NULL;
 		}
@@ -735,7 +732,7 @@
 	     */
 	    if (2 == objc && !strlen(matches[1])) {
 		i--;
-		FREE(matches[1]);
+		free(matches[1]);
 		rl_completion_append_character = '\0';
 	    }
 
@@ -775,7 +772,7 @@
 
 	case _CMD_SET:
 
-	    new = (cmds_t *) MALLOC(sizeof(cmds_t));
+	    new = (cmds_t *) malloc(sizeof(cmds_t));
 	    new->next = (cmds_t *) NULL;
 
 	    if (!cmds) {
@@ -790,7 +787,7 @@
 	    tmp = strdup(text);
 	    argc = TclReadlineParse(args, sizeof(args), tmp);
 
-	    new->cmd = (char**) MALLOC(sizeof(char*) * (argc + 1));
+	    new->cmd = (char**) malloc(sizeof(char*) * (argc + 1));
 
 	    for (i = 0; i < argc; i++)
 		new->cmd[i] = args[i];
